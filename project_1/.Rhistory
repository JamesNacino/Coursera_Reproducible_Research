df_sub$Hospital[which.max(df_sub$HA)]
}
else if (outcome == "heart attack" & num != "best" & num != "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is equal to the "num" varialbe
df_sub <- df_sub[order(df_sub$HA),]
df_sub <- df_sub[num,]
df_sub<- df_sub[, c(1,2)]
df_sub
}
else if (outcome == "heart failure" & num == "best"){
df_sub$Hospital[which.min(df_sub$HF)]
}
else if (outcome == "heart failure" & num == "worst"){
df_sub$Hospital[which.max(df_sub$HF)]
}
else if (outcome == "heart failure" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$HF),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else if (outcome == "pneumonia" & num == "best"){
df_sub$Hospital[which.min(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num == "worst"){
df_sub$Hospital[which.max(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$Pn),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else{
stop("invalid outcome")
}
}
## rankhospital("MD","pneumonia","best")
## rankhospital("CA","heart attack","worst")
## rankhospital("AL","heart failure",3)
## rankhospital("MDE","heart failure",7)  ##should show as error because 'MDE' is not a valid state
rankall("heart attack",1)
rankhospital("NY","heart attack","best")
rankhospital <- function(state, outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[df_sub$State==state,] ##Select the specific state from the State column
list_states <- unique(as.character(df$State)) ##Gather all the states and store them into a variable
count_states <- length(list_states)  ##Count the length of the list of states and store into a variable
for(i in 1:count_states){  ##loop as many times equal to the length of the list of the states
x <- list_states[i]     ##set variable to a state, where 'i' is the location of that specific state
if (x == state){break}}   ##if there is a match in the list of states to our own desired state then end loop
if (x != state){stop("invalid state")}  ##if the variable 'x' does not match our desired state then stop code
if (outcome == "heart attack" & num == "best"){
##Given the state, display the hospital name where the mortality rate for heart attack is lowest
df_sub$Hospital[which.min(df_sub$HA)]
}
else if (outcome == "heart attack" & num == "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is highest
df_sub$Hospital[which.max(df_sub$HA)]
}
else if (outcome == "heart attack" & num != "best" & num != "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is equal to the "num" varialbe
df_sub <- df_sub[order(df_sub$HA),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else if (outcome == "heart failure" & num == "best"){
df_sub$Hospital[which.min(df_sub$HF)]
}
else if (outcome == "heart failure" & num == "worst"){
df_sub$Hospital[which.max(df_sub$HF)]
}
else if (outcome == "heart failure" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$HF),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else if (outcome == "pneumonia" & num == "best"){
df_sub$Hospital[which.min(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num == "worst"){
df_sub$Hospital[which.max(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$Pn),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else{
stop("invalid outcome")
}
}
## rankhospital("MD","pneumonia","best")
## rankhospital("CA","heart attack","worst")
## rankhospital("AL","heart failure",3)
## rankhospital("MDE","heart failure",7)  ##should show as error because 'MDE' is not a valid state
rankhosptial("NY","heart attack","best")
rankhospital("NY","heart attack","best")
rankall("heart attack",1)
rankall("heart attack",1:3)
rankall("heart attack",20)
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
if (outcome == "heart attack" & num == "best"){
##Given the state, display the hospital name where the mortality rate for heart attack is lowest
df_sub$Hospital[which.min(df_sub$HA)]
}
else if (outcome == "heart attack" & num == "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is highest
df_sub$Hospital[which.max(df_sub$HA)]
}
else if (outcome == "heart attack" & num != "best" & num != "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is equal to the "num" varialbe
df_sub <- df_sub[order(df_sub$HA),]
df_sub <- df_sub[1:num,]
df_sub<- df_sub[, c(1,2)]
df_sub
}
else if (outcome == "heart failure" & num == "best"){
df_sub$Hospital[which.min(df_sub$HF)]
}
else if (outcome == "heart failure" & num == "worst"){
df_sub$Hospital[which.max(df_sub$HF)]
}
else if (outcome == "heart failure" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$HF),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else if (outcome == "pneumonia" & num == "best"){
df_sub$Hospital[which.min(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num == "worst"){
df_sub$Hospital[which.max(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$Pn),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else{
stop("invalid outcome")
}
}
## rankhospital("MD","pneumonia","best")
## rankhospital("CA","heart attack","worst")
## rankhospital("AL","heart failure",3)
## rankhospital("MDE","heart failure",7)  ##should show as error because 'MDE' is not a valid state
rankall("heart attack",20)
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
if (outcome == "heart attack" & num == "best"){
##Given the state, display the hospital name where the mortality rate for heart attack is lowest
df_sub$Hospital[which.min(df_sub$HA)]
}
else if (outcome == "heart attack" & num == "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is highest
df_sub$Hospital[which.max(df_sub$HA)]
}
else if (outcome == "heart attack" & num != "best" & num != "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is equal to the "num" varialbe
df_sub <- df_sub[order(df_sub$HA),]
df_sub <- df_sub[1:num,]
df_sub<- df_sub[, c(1,2)]
df_sub
}
else if (outcome == "heart failure" & num == "best"){
df_sub$Hospital[which.min(df_sub$HF)]
}
else if (outcome == "heart failure" & num == "worst"){
df_sub$Hospital[which.max(df_sub$HF)]
}
else if (outcome == "heart failure" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$HF),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else if (outcome == "pneumonia" & num == "best"){
df_sub$Hospital[which.min(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num == "worst"){
df_sub$Hospital[which.max(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$Pn),]
df_sub <- df_sub[order(df_sub$State),]
df_sub <- df_sub[num,]
df_sub<- df_sub[, c(1,2)]
}
else{
stop("invalid outcome")
}
}
## rankhospital("MD","pneumonia","best")
## rankhospital("CA","heart attack","worst")
## rankhospital("AL","heart failure",3)
## rankhospital("MDE","heart failure",7)  ##should show as error because 'MDE' is not a valid state
rankall("pneumonia",1:3)
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
if (outcome == "heart attack" & num == "best"){
##Given the state, display the hospital name where the mortality rate for heart attack is lowest
df_sub$Hospital[which.min(df_sub$HA)]
}
else if (outcome == "heart attack" & num == "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is highest
df_sub$Hospital[which.max(df_sub$HA)]
}
else if (outcome == "heart attack" & num != "best" & num != "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is equal to the "num" varialbe
df_sub <- df_sub[order(df_sub$HA),]
df_sub <- df_sub[1:num,]
df_sub<- df_sub[, c(1,2)]
df_sub
}
else if (outcome == "heart failure" & num == "best"){
df_sub$Hospital[which.min(df_sub$HF)]
}
else if (outcome == "heart failure" & num == "worst"){
df_sub$Hospital[which.max(df_sub$HF)]
}
else if (outcome == "heart failure" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$HF),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else if (outcome == "pneumonia" & num == "best"){
df_sub$Hospital[which.min(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num == "worst"){
df_sub$Hospital[which.max(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$Pn),]
df_sub <- df_sub[order(df_sub$State),]
df_sub <- df_sub[1:num,]
df_sub<- df_sub[, c(1,2)]
}
else{
stop("invalid outcome")
}
}
## rankhospital("MD","pneumonia","best")
## rankhospital("CA","heart attack","worst")
## rankhospital("AL","heart failure",3)
## rankhospital("MDE","heart failure",7)  ##should show as error because 'MDE' is not a valid state
rankall("pneumonia",5)
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
if (outcome == "heart attack" & num == "best"){
##Given the state, display the hospital name where the mortality rate for heart attack is lowest
df_sub$Hospital[which.min(df_sub$HA)]
}
else if (outcome == "heart attack" & num == "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is highest
df_sub$Hospital[which.max(df_sub$HA)]
}
else if (outcome == "heart attack" & num != "best" & num != "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is equal to the "num" varialbe
df_sub <- df_sub[order(df_sub$HA),]
df_sub <- df_sub[1:num,]
df_sub<- df_sub[, c(1,2)]
df_sub
}
else if (outcome == "heart failure" & num == "best"){
df_sub$Hospital[which.min(df_sub$HF)]
}
else if (outcome == "heart failure" & num == "worst"){
df_sub$Hospital[which.max(df_sub$HF)]
}
else if (outcome == "heart failure" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$HF),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else if (outcome == "pneumonia" & num == "best"){
df_sub$Hospital[which.min(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num == "worst"){
df_sub$Hospital[which.max(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$Pn),]
df_sub <- df_sub[order(df_sub$State),]
df_sub <- df_sub[1:num,]
df_sub[, c(1,2)]
}
else{
stop("invalid outcome")
}
}
## rankhospital("MD","pneumonia","best")
## rankhospital("CA","heart attack","worst")
## rankhospital("AL","heart failure",3)
## rankhospital("MDE","heart failure",7)  ##should show as error because 'MDE' is not a valid state
rankall("pneumonia",5)
tail(rankall("pneumonia", 3), 3)
rankhospital("AL","heart attack",20)
rankhospital("AR","heart attack",20)
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
list_states <- unique(as.character(df$State)) ##Gather all the states and store them into a variable
if (outcome == "heart attack" & num == "best"){
##Given the state, display the hospital name where the mortality rate for heart attack is lowest
df_sub$Hospital[which.min(df_sub$HA)]
}
else if (outcome == "heart attack" & num == "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is highest
df_sub$Hospital[which.max(df_sub$HA)]
}
else if (outcome == "heart attack" & num != "best" & num != "worst"){
##Given the state, display the hospital name where the mortality rate for heart attack is equal to the "num" varialbe
df_sub <- df_sub[order(df_sub$HA),]
df_sub <- df_sub[num,]
df_sub<- df_sub[, c(1,2)]
df_sub
}
else if (outcome == "heart failure" & num == "best"){
df_sub$Hospital[which.min(df_sub$HF)]
}
else if (outcome == "heart failure" & num == "worst"){
df_sub$Hospital[which.max(df_sub$HF)]
}
else if (outcome == "heart failure" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$HF),]
df_sub <- df_sub[num,]
df_sub$Hospital
}
else if (outcome == "pneumonia" & num == "best"){
df_sub$Hospital[which.min(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num == "worst"){
df_sub$Hospital[which.max(df_sub$Pn)]
}
else if (outcome == "pneumonia" & num != "best" & num != "worst"){
df_sub <- df_sub[order(df_sub$Pn),]
df_sub <- df_sub[order(df_sub$State),]
df_sub <- df_sub[1:num,]
df_sub[, c(1,2)]
}
else{
stop("invalid outcome")
}
}
## rankhospital("MD","pneumonia","best")
## rankhospital("CA","heart attack","worst")
## rankhospital("AL","heart failure",3)
## rankhospital("MDE","heart failure",7)  ##should show as error because 'MDE' is not a valid state
rankall("heart attack",20)
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[order(df_sub$State,df_sub$HA,] ##Select the specific state from the State column
df_sub
}
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[order(df_sub$State,df_sub$HA,)] ##Select the specific state from the State column
df_sub
}
rankall()
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[order(df_sub$State,df_sub$HA),] ##Select the specific state from the State column
df_sub
}
rankall
rankall()
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[order(df_sub$State,df_sub$HA==outcome),] ##Select the specific state from the State column
df_sub
}
ranall("HA")
rankall("HA")
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[order(df_sub$State,df_sub$HA),] ##Select the specific state from the State column
df_sub
}
rankall()
rankall <- function(outcome, num){
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
df_sub<- df[, c(2,7,11, 17,23)] ##Shrink data frame to respective columns, locations represented by a number
colnames(df_sub)<- c("Hospital", "State", "HA", "HF", "Pn") ##Rename the column names
df_sub <- df_sub[order(df_sub$State,df_sub$HA),] ##Select the specific state from the State column
list_states <- unique(as.character(df$State)) ##Gather all the states and store them into a variable
count_states <- length(list_states)  ##Count the length of the list of states and store into a variable
for(i in 1:count_states){  ##loop as many times equal to the length of the list of the states
x[i] <- list_states[i]
}
data.frame(x, stringsAsFactors=FALSE)
}
rankall()
with(df,tapply(Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, State, mean))
na.omit(df)
with(df,tapply(Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, State, mean))
readdata <- read.csv("outcome-of-care-measures.csv", header = T, colClasses="character", na.strings=c("Not Available", "NA"))
df <- data.frame(readdata)
View(df)
View(df)
View(df)
with(df,tapply(Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia, State, mean))
df <- na.omit(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df <- na.omit(outcome)
View(df)
install.packages('rJava', .libPaths()[1], 'http://www.rforge.net/')
install.packages(xlsx)
install.packages("http://cran.r-project.org/src/contrib/xlsx_0.5.7.tar.gz")
install.packages("xlsx")
read.xlsx()
require("xlsx")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
require("xlsx")
Sys.setenv(JAVA_Home='C:\Program Files (x86)\Java\jre1.8.0_45')
Sys.setenv(JAVA_HOME='C:\Program Files (x86)\Java\jre1.8.0_45')
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_45')
require(xlsx)
install.packages("xlsx")
require("xlsx")
install.packages("swirl")
library(swirl)
install.packages("swirl")
install.packages("swirl")
library(swirl)
install.packages("http://cran.r-project.org/src/contrib/RMySQL_0.10.3.tar.gz")
install.packages("RMySQL")
ucscDb <- dbConnnect(MySQL(), user="genome", host="genome.mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb <- dbConnnect(MySQL(), user="genome", host="genome.mysql.cse.ucsc.edu")
ucscDb <- dbConnnect(MySQL(), user="genome", host="genome.mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome.mysql.cse.ucsc.edu")
genome-mysql.cse.ucsc.edu
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB,"show databases;"; dbDisconnect(ucuscDB);
result <- dbGetQuery(ucscDB,"show databases;"; dbDisconnect(ucscDB);
result
result <- dbGetQuery(ucscDB,"show databases;"); dbDisconnect(ucscDB);
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
allTables
alltables[[1:5]]
alTables[[1:5]]
allTables[[1:5]]
allTables[1:5]
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches beween 1 and 3")
alltables[1:4]
hg19 <- dbConnect(MySQL(), user=”genome”, db=”hg19”, host=”genome-mysql.cse.ucsc.edu”)
hg19 <- dbConnect(MySQL(), user=”genome”, db="hg19", host="genome-mysql.cse.ucsc.edu")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches beween 1 and 3")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches beween 1 and 3")
query <- dbSendQuery(hg19, "select * from affyU133Plus2")
warnings()
fetch(query)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 & 3")
dbCleaResult(query)
dbClearResult(query)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 & 3")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 & 3")
ucscDb
query
query1 <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 & 3")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
query1 <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 & 3")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
query2 <- dbSendQuery(hg19, "select * from affyU133Plus2")
dbConnect(ucuscDb)
dbConnect(ucscDb)
query2 <- dbSendQuery(hg19, "select * from affyU133Plus2")
dbDisconnect(ucscdb)
dbDisconnect(ucscDb)
ucscDb
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
query2 <- dbSendQuery(hg19, "select * from affyU133Plus2")
setwd("C:/Users/james/SkyDrive/Data Science/Coursera_Reproducible_Research/Project_1")
library(knitr)
knit2html("PeerAssessment1.Rmd", output="Final_PA1")
